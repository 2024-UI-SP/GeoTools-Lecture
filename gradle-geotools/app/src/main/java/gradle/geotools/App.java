/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle.geotools;

// The following imports are for working with files
import java.io.File;
import java.net.URL;

// The following imports are for making the data store and source 
import org.geotools.api.data.FileDataStore;
import org.geotools.api.data.FileDataStoreFinder;
import org.geotools.api.data.SimpleFeatureSource;


// The following imports are for making the query
import org.geotools.filter.text.cql2.CQL; // this needs gt-swing dependency

import org.geotools.api.filter.Filter;

import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.api.feature.simple.SimpleFeature;
import org.geotools.api.feature.type.FeatureType;

import org.geotools.api.data.Query;

public class App {

    public static void main(String[] args) throws Exception {
        System.out.println("Running App.main() \n");

        /*
         * Make the data store and feature source
         */
        // Get the shapefile using getResource()
        URL url = App.class.getResource("countries.shp");
        // Just to make sure we got the right file
        System.out.println("URL: " + url+ "\n");  
        File file = new File(url.toURI());

        // Use the file to make the data store using FileDataStoreFinder
        FileDataStore store = FileDataStoreFinder.getDataStore(file);
        // Get the feature source from the store using getFeatureSource()
        SimpleFeatureSource source = store.getFeatureSource();

        // Do some printing      
        String typeName = store.getTypeNames()[0]; // There is only one type
        System.out.println("typeName is the name of datastore. It is almost always the name of the shapefile.");
        System.out.println("typeName: " + typeName + "\n");
        FeatureType schema = source.getSchema();
        System.out.println("schema is the list of shapefile's attributes and types");
        System.out.println("schema: " + schema + "\n");

        
        /*
         * Make the query and filter to show all countries and population
         */
        System.out.println("Result from querying for all countries and population");
        String cqlString = "include"; // Include all features
        Filter filter = CQL.toFilter(cqlString);
        Query query = new Query(typeName, filter, new String[] { "CNTRY_NAME", "POP_CNTRY" });
        System.out.println("query: " + query + "\n");

        // Get the features, i.e. the "result set"
        SimpleFeatureCollection features = source.getFeatures(query);

        try (SimpleFeatureIterator iterator = features.features()) {
            while (iterator.hasNext()) {
                SimpleFeature feature = iterator.next();
                // process feature
                for ( Object value : feature.getAttributes() ) {
                    System.out.print(value + " ");
                }
                System.out.println();
            }
        }
        System.out.println(" \n ");

        /*
         * Make the query and filter to find the country that contains the a point.
         */
        System.out.println("Result from querying for the country that contains a point");
        filter = CQL.toFilter("contains(the_geom, POINT(-100 40))"); // Note logitude first
        query = new Query(typeName, filter, new String[] { "CNTRY_NAME", "POP_CNTRY" });
        System.out.println("query: " + query + "\n");

        // process the features. All this for a single item because features is a collection
        features = source.getFeatures(query);
        try (SimpleFeatureIterator iterator = features.features()) {
            while (iterator.hasNext()) {
                SimpleFeature feature = iterator.next();
                for ( Object value : feature.getAttributes() ) {
                    System.out.print(value + " ");
                }
                System.out.println();
            }
        }
        System.out.println(" \n ");
    }   
}
